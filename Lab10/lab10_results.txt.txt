pauloenrique@pauloenrique-Latitude-E7450:~/Documents/Development/Terraform-labs/Lab10$ ls -la
total 12
drwxrwxr-x  3 pauloenrique pauloenrique 4096 Apr 30 14:27 .
drwxrwxr-x 13 pauloenrique pauloenrique 4096 Apr 30 14:26 ..
drwxrwxr-x  2 pauloenrique pauloenrique 4096 Apr 30 14:27 lambda
-rw-rw-r--  1 pauloenrique pauloenrique    0 Apr 30 14:27 main.tf
-rw-rw-r--  1 pauloenrique pauloenrique    0 Apr 30 14:27 outputs.tf
-rw-rw-r--  1 pauloenrique pauloenrique    0 Apr 30 14:27 variables.tf
pauloenrique@pauloenrique-Latitude-E7450:~/Documents/Development/Terraform-labs/Lab10$ tree .
.
├── lambda
│   └── handler.py
├── main.tf
├── outputs.tf
└── variables.tf

2 directories, 4 files
pauloenrique@pauloenrique-Latitude-E7450:~/Documents/Development/Terraform-labs/Lab10$ terraform init
Initializing the backend...
Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Finding latest version of hashicorp/archive...
- Installing hashicorp/aws v5.96.0...
- Installed hashicorp/aws v5.96.0 (signed by HashiCorp)
- Installing hashicorp/archive v2.7.0...
- Installed hashicorp/archive v2.7.0 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
pauloenrique@pauloenrique-Latitude-E7450:~/Documents/Development/Terraform-labs/Lab10$ terraform plan
data.archive_file.lambda_zip: Reading...
data.archive_file.lambda_zip: Read complete after 0s [id=d824638e5ed139d26030a0d8200065a669d0a9d3]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_apigatewayv2_api.http_api will be created
  + resource "aws_apigatewayv2_api" "http_api" {
      + api_endpoint                 = (known after apply)
      + api_key_selection_expression = "$request.header.x-api-key"
      + arn                          = (known after apply)
      + execution_arn                = (known after apply)
      + id                           = (known after apply)
      + ip_address_type              = (known after apply)
      + name                         = "LambdaAPITerraform"
      + protocol_type                = "HTTP"
      + route_selection_expression   = "$request.method $request.path"
      + tags_all                     = (known after apply)
    }

  # aws_apigatewayv2_integration.lambda_integration will be created
  + resource "aws_apigatewayv2_integration" "lambda_integration" {
      + api_id                                    = (known after apply)
      + connection_type                           = "INTERNET"
      + id                                        = (known after apply)
      + integration_method                        = "POST"
      + integration_response_selection_expression = (known after apply)
      + integration_type                          = "AWS_PROXY"
      + integration_uri                           = (known after apply)
      + payload_format_version                    = "2.0"
      + timeout_milliseconds                      = (known after apply)
    }

  # aws_apigatewayv2_route.default will be created
  + resource "aws_apigatewayv2_route" "default" {
      + api_id             = (known after apply)
      + api_key_required   = false
      + authorization_type = "NONE"
      + id                 = (known after apply)
      + route_key          = "GET /"
      + target             = (known after apply)
    }

  # aws_apigatewayv2_stage.default will be created
  + resource "aws_apigatewayv2_stage" "default" {
      + api_id        = (known after apply)
      + arn           = (known after apply)
      + auto_deploy   = true
      + deployment_id = (known after apply)
      + execution_arn = (known after apply)
      + id            = (known after apply)
      + invoke_url    = (known after apply)
      + name          = "$default"
      + tags_all      = (known after apply)
    }

  # aws_iam_role.lambda_exec will be created
  + resource "aws_iam_role" "lambda_exec" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "lambda_exec_role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy_attachment.lambda_policy will be created
  + resource "aws_iam_role_policy_attachment" "lambda_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      + role       = "lambda_exec_role"
    }

  # aws_lambda_function.my_lambda will be created
  + resource "aws_lambda_function" "my_lambda" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "./lambda/handler.zip"
      + function_name                  = "MiFuncionTerraform"
      + handler                        = "handler.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "0YM+r6hkKtMpunzUeacF3ANjXX3UDd+Af8PHP2bV8Co="
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + ephemeral_storage (known after apply)

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # aws_lambda_permission.api_gateway will be created
  + resource "aws_lambda_permission" "api_gateway" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "MiFuncionTerraform"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "AllowExecutionFromAPIGateway"
      + statement_id_prefix = (known after apply)
    }

Plan: 8 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + api_url              = (known after apply)
  + lambda_function_name = "MiFuncionTerraform"

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
pauloenrique@pauloenrique-Latitude-E7450:~/Documents/Development/Terraform-labs/Lab10$ terraform apply -auto-approve
data.archive_file.lambda_zip: Reading...
data.archive_file.lambda_zip: Read complete after 0s [id=d824638e5ed139d26030a0d8200065a669d0a9d3]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_apigatewayv2_api.http_api will be created
  + resource "aws_apigatewayv2_api" "http_api" {
      + api_endpoint                 = (known after apply)
      + api_key_selection_expression = "$request.header.x-api-key"
      + arn                          = (known after apply)
      + execution_arn                = (known after apply)
      + id                           = (known after apply)
      + ip_address_type              = (known after apply)
      + name                         = "LambdaAPITerraform"
      + protocol_type                = "HTTP"
      + route_selection_expression   = "$request.method $request.path"
      + tags_all                     = (known after apply)
    }

  # aws_apigatewayv2_integration.lambda_integration will be created
  + resource "aws_apigatewayv2_integration" "lambda_integration" {
      + api_id                                    = (known after apply)
      + connection_type                           = "INTERNET"
      + id                                        = (known after apply)
      + integration_method                        = "POST"
      + integration_response_selection_expression = (known after apply)
      + integration_type                          = "AWS_PROXY"
      + integration_uri                           = (known after apply)
      + payload_format_version                    = "2.0"
      + timeout_milliseconds                      = (known after apply)
    }

  # aws_apigatewayv2_route.default will be created
  + resource "aws_apigatewayv2_route" "default" {
      + api_id             = (known after apply)
      + api_key_required   = false
      + authorization_type = "NONE"
      + id                 = (known after apply)
      + route_key          = "GET /"
      + target             = (known after apply)
    }

  # aws_apigatewayv2_stage.default will be created
  + resource "aws_apigatewayv2_stage" "default" {
      + api_id        = (known after apply)
      + arn           = (known after apply)
      + auto_deploy   = true
      + deployment_id = (known after apply)
      + execution_arn = (known after apply)
      + id            = (known after apply)
      + invoke_url    = (known after apply)
      + name          = "$default"
      + tags_all      = (known after apply)
    }

  # aws_iam_role.lambda_exec will be created
  + resource "aws_iam_role" "lambda_exec" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "lambda_exec_role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy_attachment.lambda_policy will be created
  + resource "aws_iam_role_policy_attachment" "lambda_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      + role       = "lambda_exec_role"
    }

  # aws_lambda_function.my_lambda will be created
  + resource "aws_lambda_function" "my_lambda" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "./lambda/handler.zip"
      + function_name                  = "MiFuncionTerraform"
      + handler                        = "handler.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "0YM+r6hkKtMpunzUeacF3ANjXX3UDd+Af8PHP2bV8Co="
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + ephemeral_storage (known after apply)

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # aws_lambda_permission.api_gateway will be created
  + resource "aws_lambda_permission" "api_gateway" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "MiFuncionTerraform"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "AllowExecutionFromAPIGateway"
      + statement_id_prefix = (known after apply)
    }

Plan: 8 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + api_url              = (known after apply)
  + lambda_function_name = "MiFuncionTerraform"
aws_iam_role.lambda_exec: Creating...
aws_apigatewayv2_api.http_api: Creating...
aws_iam_role.lambda_exec: Creation complete after 2s [id=lambda_exec_role]
aws_iam_role_policy_attachment.lambda_policy: Creating...
aws_lambda_function.my_lambda: Creating...
aws_apigatewayv2_api.http_api: Creation complete after 2s [id=321q4etrfk]
aws_apigatewayv2_stage.default: Creating...
aws_iam_role_policy_attachment.lambda_policy: Creation complete after 0s [id=lambda_exec_role-20250430193126926900000001]
aws_apigatewayv2_stage.default: Creation complete after 1s [id=$default]
aws_lambda_function.my_lambda: Still creating... [10s elapsed]
aws_lambda_function.my_lambda: Creation complete after 15s [id=MiFuncionTerraform]
aws_lambda_permission.api_gateway: Creating...
aws_apigatewayv2_integration.lambda_integration: Creating...
aws_lambda_permission.api_gateway: Creation complete after 0s [id=AllowExecutionFromAPIGateway]
aws_apigatewayv2_integration.lambda_integration: Creation complete after 0s [id=xy1oprr]
aws_apigatewayv2_route.default: Creating...
aws_apigatewayv2_route.default: Creation complete after 1s [id=f7pr6js]

Apply complete! Resources: 8 added, 0 changed, 0 destroyed.

Outputs:

api_url = "https://321q4etrfk.execute-api.us-east-1.amazonaws.com"
lambda_function_name = "MiFuncionTerraform"
pauloenrique@pauloenrique-Latitude-E7450:~/Documents/Development/Terraform-labs/Lab10$ terraform plan
data.archive_file.lambda_zip: Reading...
data.archive_file.lambda_zip: Read complete after 0s [id=d824638e5ed139d26030a0d8200065a669d0a9d3]
aws_iam_role.lambda_exec: Refreshing state... [id=lambda_exec_role]
aws_apigatewayv2_api.http_api: Refreshing state... [id=321q4etrfk]
aws_apigatewayv2_stage.default: Refreshing state... [id=$default]
aws_iam_role_policy_attachment.lambda_policy: Refreshing state... [id=lambda_exec_role-20250430193126926900000001]
aws_lambda_function.my_lambda: Refreshing state... [id=MiFuncionTerraform]
aws_lambda_permission.api_gateway: Refreshing state... [id=AllowExecutionFromAPIGateway]
aws_apigatewayv2_integration.lambda_integration: Refreshing state... [id=xy1oprr]
aws_apigatewayv2_route.default: Refreshing state... [id=f7pr6js]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_dynamodb_table.visitas will be created
  + resource "aws_dynamodb_table" "visitas" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "id"
      + id               = (known after apply)
      + name             = "VisitasTable"
      + read_capacity    = (known after apply)
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags_all         = (known after apply)
      + write_capacity   = (known after apply)

      + attribute {
          + name = "id"
          + type = "S"
        }

      + point_in_time_recovery (known after apply)

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
pauloenrique@pauloenrique-Latitude-E7450:~/Documents/Development/Terraform-labs/Lab10$ terraform apply -auto-approve
data.archive_file.lambda_zip: Reading...
data.archive_file.lambda_zip: Read complete after 0s [id=d824638e5ed139d26030a0d8200065a669d0a9d3]
aws_iam_role.lambda_exec: Refreshing state... [id=lambda_exec_role]
aws_apigatewayv2_api.http_api: Refreshing state... [id=321q4etrfk]
aws_iam_role_policy_attachment.lambda_policy: Refreshing state... [id=lambda_exec_role-20250430193126926900000001]
aws_lambda_function.my_lambda: Refreshing state... [id=MiFuncionTerraform]
aws_apigatewayv2_stage.default: Refreshing state... [id=$default]
aws_lambda_permission.api_gateway: Refreshing state... [id=AllowExecutionFromAPIGateway]
aws_apigatewayv2_integration.lambda_integration: Refreshing state... [id=xy1oprr]
aws_apigatewayv2_route.default: Refreshing state... [id=f7pr6js]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_dynamodb_table.visitas will be created
  + resource "aws_dynamodb_table" "visitas" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "id"
      + id               = (known after apply)
      + name             = "VisitasTable"
      + read_capacity    = (known after apply)
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags_all         = (known after apply)
      + write_capacity   = (known after apply)

      + attribute {
          + name = "id"
          + type = "S"
        }

      + point_in_time_recovery (known after apply)

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.
aws_dynamodb_table.visitas: Creating...
aws_dynamodb_table.visitas: Creation complete after 9s [id=VisitasTable]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

api_url = "https://321q4etrfk.execute-api.us-east-1.amazonaws.com"
lambda_function_name = "MiFuncionTerraform"
pauloenrique@pauloenrique-Latitude-E7450:~/Documents/Development/Terraform-labs/Lab10$ curl https://321q4etrfk.execute-api.us-east-1.amazonaws.com/
Hola desde Lambda con Terraform!
pauloenrique@pauloenrique-Latitude-E7450:~/Documents/Development/Terraform-labs/Lab10$ aws dynamodb describe-table --table-name VisitasTable --region us-east-1                                                                                aws dynamodb describe-table --table-name VisitasTable --region us-east-1
{
    "Table": {
        "AttributeDefinitions": [
            {
                "AttributeName": "id",
                "AttributeType": "S"
            }
        ],
        "TableName": "VisitasTable",
        "KeySchema": [
            {
                "AttributeName": "id",
                "KeyType": "HASH"
            }
        ],
        "TableStatus": "ACTIVE",
        "CreationDateTime": "2025-04-30T14:33:25.126000-05:00",
        "ProvisionedThroughput": {
            "NumberOfDecreasesToday": 0,
            "ReadCapacityUnits": 0,
            "WriteCapacityUnits": 0
        },
        "TableSizeBytes": 0,
        "ItemCount": 0,
        "TableArn": "arn:aws:dynamodb:us-east-1:800917983494:table/VisitasTable",
        "TableId": "0057c4f0-f16f-477e-8143-a4dbc4957f6b",
        "BillingModeSummary": {
            "BillingMode": "PAY_PER_REQUEST",
            "LastUpdateToPayPerRequestDateTime": "2025-04-30T14:33:25.126000-05:00"
        },
        "DeletionProtectionEnabled": false,
        "WarmThroughput": {
            "ReadUnitsPerSecond": 12000,
            "WriteUnitsPerSecond": 4000,
            "Status": "ACTIVE"
        }
    }
}
pauloenrique@pauloenrique-Latitude-E7450:~/Documents/Development/Terraform-labs/Lab10$ 


